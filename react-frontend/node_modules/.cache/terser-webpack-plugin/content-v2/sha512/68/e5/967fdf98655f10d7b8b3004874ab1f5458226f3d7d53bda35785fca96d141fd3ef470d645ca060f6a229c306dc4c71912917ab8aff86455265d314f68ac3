{"map":"{\"version\":3,\"sources\":[\"/home/ubuntu/FlaskAndReact/react-frontend/src/serviceWorker.js\",\"/home/ubuntu/FlaskAndReact/react-frontend/src/store/modules/addResult.js\",\"/home/ubuntu/FlaskAndReact/react-frontend/src/store/modules/index.js\",\"/home/ubuntu/FlaskAndReact/react-frontend/src/index.js\"],\"names\":[\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ADDER\",\"intialState\",\"list\",\"combineReducers\",\"addReducer\",\"state\",\"arguments\",\"length\",\"undefined\",\"action\",\"type\",\"elem\",\"devTools\",\"__REDUX_DEVTOOLS_EXTENSION__\",\"store\",\"createStore\",\"rootReducer\",\"console\",\"log\",\"getState\",\"ReactDOM\",\"render\",\"react_default\",\"a\",\"createElement\",\"es\",\"App_default\",\"document\",\"getElementById\"],\"mappings\":\"mNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4EClBAC,EAAQ,mBAIRC,EAAc,CACnBC,KAAM,CAAC,CAAC,YCFMC,IAAAA,EAAAA,OAAAA,EAAAA,EAAAA,CAAgB,CAC9BC,WDIc,WACf,IADmCC,EACnCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAD2CL,EAAaQ,EACxDH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACC,OAAOC,EAAOC,MACb,KAAKV,EACJ,MAAO,CACNE,KAAMO,EAAOE,MAEf,QACC,OAAON,cEFJO,EACLhB,OAAOiB,8BAAgCjB,OAAOiB,+BACzCC,EAAQC,OAAAA,EAAAA,EAAAA,CAAYC,EAAaJ,GACvCK,QAAQC,IAAIJ,EAAMK,YAElBC,EAAAA,EAASC,OACRC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUX,MAAOA,GACjBQ,EAAAC,EAAAC,cAACE,EAAAH,EAAD,OAEAI,SAASC,eAAe\",\"sourcesContent\":[\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"const ADDER = 'addReducer/ADDER';\\n\\nexport const adder = elem => ({ type: ADDER, elem });\\n\\nconst intialState = {\\n\\tlist: [['AAAAAA']]\\n};\\n\\nexport default function addReducer(state = intialState, action)\\n{\\n\\tswitch(action.type) {\\n\\t\\tcase ADDER:\\n\\t\\t\\treturn {\\n\\t\\t\\t\\tlist: action.elem\\n\\t\\t\\t};\\n\\t\\tdefault:\\n\\t\\t\\treturn state;\\n\\t}\\n}\\n\\n\",\"import { combineReducers } from 'redux';\\nimport addReducer from './addResult';\\n\\nexport default combineReducers({\\n\\taddReducer,\\n});\\n\\n\\n\",\"import 'bootstrap/dist/css/bootstrap.min.css';\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport App from './components/App';\\nimport * as serviceWorker from './serviceWorker';\\nimport './index.css'\\n\\nimport { createStore } from 'redux';\\nimport rootReducer from './store/modules'\\nimport { Provider } from 'react-redux';\\n\\n\\n\\n\\nconst devTools = \\n\\twindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\\nconst store = createStore(rootReducer, devTools);\\nconsole.log(store.getState());\\n\\nReactDOM.render(\\n\\t<Provider store={store}>\\n\\t<App/>\\n\\t</Provider>,\\n\\tdocument.getElementById('root')\\n);\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{13:function(e,n,t){e.exports=t(26)},19:function(e,n,t){},26:function(e,n,t){\"use strict\";t.r(n);t(14);var a=t(0),o=t.n(a),r=t(8),s=t.n(r),d=t(9),m=t.n(d);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));t(19);var l=t(2),b=\"addReducer/ADDER\",u={list:[[\"AAAAAA\"]]};var c=Object(l.b)({addReducer:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u,n=arguments.length>1?arguments[1]:void 0;switch(n.type){case b:return{list:n.elem};default:return e}}}),i=t(12),p=window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__(),j=Object(l.c)(c,p);console.log(j.getState()),s.a.render(o.a.createElement(i.a,{store:j},o.a.createElement(m.a,null)),document.getElementById(\"root\"))},9:function(e,n){throw new Error('Module build failed (from ./node_modules/babel-loader/lib/index.js):\\nSyntaxError: /home/ubuntu/FlaskAndReact/react-frontend/src/components/App.js: Unexpected token, expected \",\" (89:8)\\n\\n\\x1b[0m \\x1b[90m 87 | \\x1b[39m\\x1b[0m\\n\\x1b[0m \\x1b[90m 88 | \\x1b[39m\\x1b[36mconst\\x1b[39m mapStateToProps \\x1b[33m=\\x1b[39m state \\x1b[33m=>\\x1b[39m ({\\x1b[0m\\n\\x1b[0m\\x1b[31m\\x1b[1m>\\x1b[22m\\x1b[39m\\x1b[90m 89 | \\x1b[39m\\tconsole\\x1b[33m.\\x1b[39mlog(state\\x1b[33m.\\x1b[39maddReducer\\x1b[33m.\\x1b[39mlist)\\x1b[33m;\\x1b[39m\\x1b[0m\\n\\x1b[0m \\x1b[90m    | \\x1b[39m\\t       \\x1b[31m\\x1b[1m^\\x1b[22m\\x1b[39m\\x1b[0m\\n\\x1b[0m \\x1b[90m 90 | \\x1b[39m\\tlist\\x1b[33m:\\x1b[39m state\\x1b[33m.\\x1b[39maddReducer\\x1b[33m.\\x1b[39mlist\\x1b[33m,\\x1b[39m\\x1b[0m\\n\\x1b[0m \\x1b[90m 91 | \\x1b[39m})\\x1b[33m;\\x1b[39m\\x1b[0m\\n\\x1b[0m \\x1b[90m 92 | \\x1b[39m\\x1b[0m\\n    at Object.raise (/home/ubuntu/FlaskAndReact/react-frontend/node_modules/@babel/parser/lib/index.js:3831:17)\\n    at Object.unexpected (/home/ubuntu/FlaskAndReact/react-frontend/node_modules/@babel/parser/lib/index.js:5143:16)\\n    at Object.expect (/home/ubuntu/FlaskAndReact/react-frontend/node_modules/@babel/parser/lib/index.js:5135:28)\\n    at Object.parseObj (/home/ubuntu/FlaskAndReact/react-frontend/node_modules/@babel/parser/lib/index.js:6600:14)\\n    at Object.parseExprAtom (/home/ubuntu/FlaskAndReact/react-frontend/node_modules/@babel/parser/lib/index.js:6229:21)\\n    at Object.parseExprAtom (/home/ubuntu/FlaskAndReact/react-frontend/node_modules/@babel/parser/lib/index.js:3552:20)\\n    at Object.parseExprSubscripts (/home/ubuntu/FlaskAndReact/react-frontend/node_modules/@babel/parser/lib/index.js:5862:23)\\n    at Object.parseMaybeUnary (/home/ubuntu/FlaskAndReact/react-frontend/node_modules/@babel/parser/lib/index.js:5842:21)\\n    at Object.parseExprOps (/home/ubuntu/FlaskAndReact/react-frontend/node_modules/@babel/parser/lib/index.js:5729:23)\\n    at Object.parseMaybeConditional (/home/ubuntu/FlaskAndReact/react-frontend/node_modules/@babel/parser/lib/index.js:5702:23)\\n    at Object.parseMaybeAssign (/home/ubuntu/FlaskAndReact/react-frontend/node_modules/@babel/parser/lib/index.js:5647:21)\\n    at Object.parseMaybeAssign (/home/ubuntu/FlaskAndReact/react-frontend/node_modules/@babel/parser/lib/index.js:2621:18)\\n    at Object.parseParenAndDistinguishExpression (/home/ubuntu/FlaskAndReact/react-frontend/node_modules/@babel/parser/lib/index.js:6435:28)\\n    at Object.parseParenAndDistinguishExpression (/home/ubuntu/FlaskAndReact/react-frontend/node_modules/@babel/parser/lib/index.js:2670:18)\\n    at Object.parseExprAtom (/home/ubuntu/FlaskAndReact/react-frontend/node_modules/@babel/parser/lib/index.js:6215:21)\\n    at Object.parseExprAtom (/home/ubuntu/FlaskAndReact/react-frontend/node_modules/@babel/parser/lib/index.js:3552:20)')}},[[13,1,2]]]);","extractedComments":[]}