{"version":3,"sources":["components/World.js","components/InputForm.js","components/PredictResult.js","store/modules/addResult.js","components/App.js","serviceWorker.js","store/modules/index.js","index.js"],"names":["geo_Header","options","colorAxis","colors","legend","World","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","concat","appData","nextProps","setState","react_default","a","createElement","index_esm","chartType","width","height","React","Component","InputForm1","country","handleChange","e","defineProperty","target","name","value","handleSubmit","preventDefault","onCreate","handleClear","Form","onSubmit","Row","Label","Control","as","required","variant","placeholder","onChange","Feedback","type","Group","Col","Button","PredictResult","load","arr","graphVisual","resList","i","length","val","tmp","toString","push","tmpTable","Math","round","title","chartArea","hAxis","minValue","maxValue","bar","groupWidth","position","Table","striped","bordered","hover","size","connect","addReducer","list","ADDER","intialState","App","classify","preprcData","inputDim","tf","paddedSeq","pad","model","predictOnBatch","dataSync","handleCreate","_ref","asyncToGenerator","regenerator_default","mark","_callee","processedText","singleObj","wrap","_context","prev","next","fetch","method","body","then","response","json","result","sent","adder","Number","formData","update","$push","stop","_x","apply","arguments","loading","pageData","class","lib_default","spinnerColor","spinnerWidth","Container","Jumbotron","components_World","components_PredictResult","InputForm","dispatch","predRes","Boolean","window","location","hostname","match","combineReducers","undefined","action","devTools","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","rootReducer","ReactDOM","render","es","src_components_App","document","getElementById"],"mappings":"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","file":"js/main.c3694abc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Chart from \"react-google-charts\";\r\n\r\nlet geo_Header = [[\"Country\", \"Popularity\"]];\r\n\r\nconst options = { colorAxis: {colors: ['black']},\r\n                  legend: \"none\" };\r\n\r\n\r\nclass World extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      data : geo_Header.concat(this.props.appData) \r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {    \r\n     if(nextProps.appData !== this.props.appData) {\r\n        this.setState({data : this.state.data.concat(nextProps.appData)});\r\n     }\r\n  }\r\n\r\n  render() {\r\n     return (\r\n        <Chart  chartType=\"GeoChart\" \r\n                width=\"100%\" \r\n\t              height=\"5%\"\r\n\t              data={this.state.data} \r\n\t              options={options} />\r\n    );\r\n  }\r\n}\r\n\r\nexport default World;","import React from 'react';\r\nimport {\r\n  Form,\r\n  Button,\r\n  Col,\r\n} from 'react-bootstrap';\r\n\r\nclass InputForm1 extends React.Component {\r\n   state = { country: '' }\r\n\r\n   handleChange = (e) => {\r\n      this.setState({\r\n         [e.target.name]: e.target.value\r\n      });\r\n   }\r\n\r\n   handleSubmit = (e) => {\r\n\t   e.preventDefault();\r\n\t   this.props.onCreate(this.state); // 상태 값을 부모에게 전달???\r\n\t   this.setState({\r\n\t      country: ''\r\n      });\r\n   }\r\n\r\n   handleClear = (e) => {\r\n      e.preventDefault();\r\n   }\r\n\r\n   render() {\r\n      return (\r\n\t         <Form onSubmit={this.handleSubmit}>\r\n               <Form.Row>\r\n                  <Form.Label>Input ingredient list</Form.Label>\r\n                  <Form.Control  as=\"textarea\"\r\n                                 required\r\n                                 variant=\"dark\"\r\n                                 placeholder=\"Tomato, Green Tea, olive oil\"\r\n                                 value={this.state.country}\r\n                                 onChange={this.handleChange}\r\n                                 name=\"country\"/>\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                     Please provide a valid input.\r\n                  </Form.Control.Feedback>\r\n               </Form.Row>\r\n               <br></br>\r\n               <Form.Row>\r\n                  <Form.Group as={Col}>\r\n                     <Button variant=\"dark\"  type=\"submit\"> 등 록 </Button>\r\n                  </Form.Group>\r\n                  <Form.Group as={Col}>\r\n                     <Button variant=\"danger\" type=\"clear\"> 취 소 </Button>\r\n                  </Form.Group>\r\n               </Form.Row>\r\n            </Form>\r\n     );\r\n   }\r\n}\r\n\r\nexport default InputForm1;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Chart from \"react-google-charts\";\r\nimport './App.css'\r\nimport { Table } from 'react-bootstrap';\r\n\r\nclass PredictResult extends Component {\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n    this.state =  { data : null,\r\n                    load : false \r\n                  };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {    \r\n    if(nextProps.value !== this.state.value) {\r\n       this.setState({data : nextProps.value,\r\n                      load : true });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let arr = [[\"Country\", \"Popularity\"]];\r\n    let graphVisual = '';\r\n    let resList = [];\r\n\r\n\r\n    if(this.state.load === true)\r\n    {\r\n      const { data } = this.state;\r\n      \r\n      for(var i = 0; i < data.length; i+=1 )  \r\n      {  \r\n        const val = data[i] * 100;\r\n        const tmp = [i.toString(), val];\r\n        arr.push(tmp);\r\n\r\n        if(i % 2 === 0)\r\n        {\r\n          let tmpTable =  <tr>\r\n                            <td>{i.toString()}</td>\r\n                            <td>{Math.round(data[i] * 100)}</td>\r\n                            <td>{(i+1).toString()}</td>\r\n                            <td>{Math.round(data[i+1] * 100)}</td>\r\n                          </tr>\r\n          resList.push(tmpTable);\r\n        }\r\n      }\r\n            \r\n      \r\n      graphVisual = <div>\r\n                      <Chart  width={'100%'}\r\n                              height={'1%'}\r\n                              chartType=\"Bar\"\r\n                              data={arr}\r\n                              options={{\r\n                                title : 'Classification Result',\r\n                                chartArea : { width: '100%' },\r\n                                hAxis : {\r\n                                  minValue: 0,\r\n                                  maxValue: 100,\r\n                                },\r\n                                bar : { groupWidth : '50%'},\r\n                                legend : { position : 'none'},\r\n                              }}\r\n                      />\r\n                      <Table striped bordered hover size=\"sm\">\r\n                        <thead>\r\n                          <tr>\r\n                            <th>Cuisine2</th>\r\n                            <th>Classifiy1</th>\r\n                            <th>Cuisine2</th>\r\n                            <th>Classify2</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          {resList}\r\n                        </tbody>\r\n                      </Table>\r\n                    </div>\r\n    }\r\n\r\n    return (\r\n        <div>{graphVisual}</div>\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tvalue : state.addReducer.list\r\n\t};\r\n}\r\n\r\nexport default connect( mapStateToProps )( PredictResult );","const ADDER = 'addReducer/ADDER';\n\nexport const adder = list => ({ type: ADDER, list });\n\nconst intialState = {\n\tlist: []\n};\n\nexport default function addReducer(state = intialState, action)\n{\n\tswitch(action.type) {\n\t\tcase ADDER:\n\t\t\treturn {\n\t\t\t\tlist: action.list\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\n","import React, { Component } from 'react';\r\nimport World from './World';\r\nimport Form1 from './InputForm';\r\nimport PredictResult from './PredictResult';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport update from 'react-addons-update';\r\nimport Spinner from 'react-spinner-material';\r\nimport { connect } from 'react-redux';\r\nimport { adder } from '../store/modules/addResult';\r\nimport './App.css'\r\nimport { Jumbotron, Container } from 'react-bootstrap';\r\n\r\n\r\n\r\nconst MODEL_URL = 'http://127.0.0.1/model';\r\n\r\n//////////////////////////////////////////////\r\nclass App extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tformData: [],\r\n\t\t\tmodel: null,\r\n      \t};\r\n  \t}\r\n  \r\n\tasync componentDidMount() {\r\n     \tthis.setState({ model: await tf.loadLayersModel(MODEL_URL),\r\n                   \t\tloading: true});\r\n  \t}\r\n\r\n\tclassify = (preprcData) => {\r\n     \tconst inputDim = [1, 150]\r\n     \t// Data Preprocessing2 Padding preprocessedSequence -> [1, 150]\r\n\t\t// prediction using model :: output as a softmax result that represent's probability of each 20 elements.\r\n\r\n     \tconst prediction = tf.tidy(() => { \r\n        \tlet paddedSeq = tf.tensor1d(preprcData).pad( [[ inputDim[1]-preprcData.length, 0 ]] );\r\n\t\t\treturn (this.state.model).predictOnBatch(tf.reshape(paddedSeq, inputDim));\r\n\t\t });\r\n\t\t \r\n     \treturn prediction.dataSync();  \r\n  \t}\r\n\r\n  \t// callback function InputForm component : get input value and post server \r\n  \thandleCreate = async (data) => {\r\n     \t// Text Data -> server (POST : txt) -> text2Seq \r\n     \tvar processedText = await fetch(\"/getData\", {\tmethod: 'POST',\r\n            \t\t\t\t\t\t      \t\t\t\tbody: [data.country]\r\n\t\t\t\t\t\t\t    \t\t\t\t\t}).then(response => {\r\n           \t\t\t\t\t\t\t\t\t\t\t\treturn response.json();\r\n        \t\t\t\t\t\t\t\t\t\t\t}).then(result => {\r\n           \t\t\t\t\t\t\t\t\t\t\t\treturn result;\r\n     \t\t\t\t\t\t\t\t\t\t\t\t});\r\n\r\n     \tdata.value  = this.classify(processedText[0]);\r\n     \tdata.country = \"China\";\r\n\t\t\t \r\n\t\t//Redux Part!!!!!!!!!!!!!!!!!!!!!!!!!!//\r\n\t\tconst { adder } = this.props;\r\n\t\tadder(data.value);\r\n\t\t//Redux Part!!!!!!!!!!!!!!!!!!!!!!!!!!//\r\n\r\n     \tvar singleObj = [data.country, Number(data.value)* 100];\r\n     \tthis.setState({ formData: update( this.state.formData, { $push: [singleObj] }) })\r\n  \t}\r\n \r\n  \trender() {\r\n  \t\tlet pageData;\r\n    \t\tif( this.state.model === null ) {\r\n\t\t\t\tpageData = <container class=\"centered\">\r\n\t\t\t\t\t\t\t\t<Spinner size={120} \r\n                           \t \t \t \t spinnerColor={\"blue\"} \r\n                           \t \t\t \t spinnerWidth={2} />\r\n                  \t\t\t\t<p>LOADING MODEL</p>\r\n                  \t\t   </container>\r\n\t\t\t} else {\r\n       \t\t\tpageData = <div>\r\n\t\t\t\t\t   \t\t\t<Container>\r\n\t\t\t\t\t\t\t\t\t<Jumbotron >\r\n\t\t\t\t\t\t\t\t\t\t<h1>Prediction Model by Learning Ingredient-Cuisine</h1>\r\n\t\t\t\t\t\t\t\t\t</Jumbotron>\r\n\t\t\t\t\t\t\t\t\t<World appData={this.state.formData} />\r\n\t\t\t\t\t\t\t\t\t<PredictResult/>\r\n\t\t\t\t\t\t\t\t\t<Form1 onCreate={this.handleCreate} />\r\n\t\t\t\t\t\t\t\t</Container>  \r\n\t\t\t\t\t\t   </div>\r\n    \t\t}\r\n    \t\treturn ( <div>{pageData}</div> );\r\n  \t}\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tvalue : state.addReducer.list\r\n\t};\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n\tadder: predRes => dispatch( adder(predRes) ),\r\n});\r\n\r\nexport default connect(\r\n\tmapStateToProps,\r\n\tmapDispatchToProps\r\n)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport addReducer from './addResult';\r\n\r\n\r\nexport default combineReducers({\r\n\taddReducer,\r\n});\r\n\r\n\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css'\r\n\r\nimport { createStore } from 'redux';\r\nimport rootReducer from './store/modules'\r\nimport { Provider } from 'react-redux';\r\n\r\nconst devTools = \r\n\twindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\r\nconst store = createStore(rootReducer, devTools);\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App/>\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\n"],"sourceRoot":""}