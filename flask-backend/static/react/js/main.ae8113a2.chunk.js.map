{"version":3,"sources":["components/World.js","components/InputForm.js","components/PredictResult.js","store/modules/addResult.js","components/App.js","serviceWorker.js","store/modules/index.js","index.js"],"names":["TABLE","World","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","load","nextProps","value","setState","graphVisual","arr","i","length","val","Math","round","tmp","push","react_default","a","createElement","index_esm","chartType","width","height","options","colorAxis","colors","backgroundColor","legend","React","Component","connect","addReducer","list","InputForm1","inputTextData","handleChange","e","defineProperty","target","name","handleSubmit","preventDefault","onCreate","handleClear","Form","onSubmit","onReset","Row","Label","Control","as","required","variant","placeholder","onChange","Feedback","type","Group","Col","Button","PredictResult","resList","tmpTable","chartArea","hAxis","minValue","textStyle","fontSize","bar","groupWidth","position","Table","striped","bordered","hover","size","ADDER","intialState","MODEL_URL_AT_WINDOWS","INPUTDIM","BAGOFWORDS","INPUTDIM2","App","classify","preprcData","model","tf","predictOnBatch","dataSync","inputFormCallBack","_ref","asyncToGenerator","regenerator_default","mark","_callee","processedText","paddedSeq","reshapeSeq","classification","bag","item","bagTensor","reshapeBag","classification2","wrap","_context","prev","next","inputText","fetch","method","body","then","response","json","result","sent","console","log","pad","models","chooseModel","Array","fill","adder","stop","_x","apply","arguments","loading","loaded","pageData","class","lib_default","spinnerColor","spinnerWidth","Container","Jumbotron","block","className","components_World","components_PredictResult","InputForm","dispatch","predRes","Boolean","window","location","hostname","match","combineReducers","undefined","action","devTools","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","rootReducer","ReactDOM","render","es","src_components_App","document","getElementById"],"mappings":"uaAUMA,EAAQ,CAAE,SAAU,iBAAkB,gBAAiB,QAAS,cACtD,SAAU,SAAW,QAAS,UAAY,QAC1C,UAAW,QAAS,cAAe,SAAU,UAC7C,SAAU,gBAAiB,QAAS,WAAY,WAG1DC,cACJ,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAO,KACPC,MAAO,GAJOT,yFAQQU,GACpBA,EAAUC,QAAUR,KAAKI,MAAMI,OAC/BR,KAAKS,SAAS,CAACJ,KAAOE,EAAUC,MACjBF,MAAO,qCAK1B,IACII,EADAC,EAAM,CAAC,CAAC,UAAW,eAGvB,IAAuB,IAApBX,KAAKI,MAAME,KAIZ,IAHF,IACUD,EAASL,KAAKI,MAAdC,KAEAO,EAAI,EAAGA,EAAIP,EAAKQ,OAAQD,IAChC,CACE,IAAME,EAAMC,KAAKC,MAAgB,IAAVX,EAAKO,IACtBK,EAAM,CAACvB,EAAMkB,GAAIE,GACpBA,EAAM,GAAIH,EAAIO,KAAKD,GAc1B,OAVAP,EAAcS,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,UAAU,WACRC,MAAM,OACNC,OAAO,KACPpB,KAAMM,EACNe,QAAW,CAAGC,UAAW,CAACC,OAAQ,CAAC,QAAS,UAC9BC,gBAAiB,UACjBC,OAAQ,UAK1CX,EAAAC,EAAAC,cAAA,WAAMX,UA3CMqB,IAAMC,WAsDXC,cANO,SAAC7B,GACtB,MAAO,CACNI,MAAQJ,EAAM8B,WAAWC,OAIZF,CAA4BtC,uCCT5ByC,6MArDZhC,MAAQ,CAAEiC,cAAe,MAEzBC,aAAe,SAACC,GACb1C,EAAKY,SAALX,OAAA0C,EAAA,EAAA1C,CAAA,GACIyC,EAAEE,OAAOC,KAAOH,EAAEE,OAAOjC,WAIhCmC,aAAe,SAACJ,GACfA,EAAEK,iBACF/C,EAAKD,MAAMiD,SAAShD,EAAKO,OACzBP,EAAKY,SAAS,CACX4B,cAAe,QAInBS,YAAc,SAACP,GACZA,EAAEK,iBACF/C,EAAKY,SAAS,CACX4B,cAAe,8EAKlB,OACIlB,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAMC,SAAUhD,KAAK2C,aAAcM,QAASjD,KAAK8C,aAC5C3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAKG,IAAN,KACG/B,EAAAC,EAAAC,cAAC0B,EAAA,EAAKI,MAAN,8BACAhC,EAAAC,EAAAC,cAAC0B,EAAA,EAAKK,QAAN,CAAeC,GAAG,WACHC,UAAQ,EACRC,QAAQ,OACRC,YAAY,+BACZhD,MAAOR,KAAKI,MAAMiC,cAClBoB,SAAUzD,KAAKsC,aACfI,KAAK,kBACpBvB,EAAAC,EAAAC,cAAC0B,EAAA,EAAKK,QAAQM,SAAd,CAAuBC,KAAK,WAA5B,kCAIHxC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC0B,EAAA,EAAKG,IAAN,KACG/B,EAAAC,EAAAC,cAAC0B,EAAA,EAAKa,MAAN,CAAYP,GAAIQ,KACb1C,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAQP,QAAQ,OAAQI,KAAK,UAA7B,oBAEHxC,EAAAC,EAAAC,cAAC0B,EAAA,EAAKa,MAAN,CAAYP,GAAIQ,KACb1C,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAQP,QAAQ,SAASI,KAAK,SAA9B,6BA9CI5B,IAAMC,4BCDzBtC,EAAQ,CAAE,SAAU,iBAAkB,2BAA4B,QAAS,cACjE,SAAU,SAAW,QAAS,UAAY,QAC1C,UAAW,QAAS,sBAAuB,SAAU,UACrD,SAAU,2BAA4B,QAAS,WAAY,WAErEqE,cACJ,SAAAA,EAAYnE,GACZ,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+D,IACElE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiE,GAAA5D,KAAAH,KAAMJ,KACDQ,MAAS,CACZC,KAAO,KACPC,MAAO,GAJXT,yFAQ0BU,GACrBA,EAAUC,QAAUR,KAAKI,MAAMI,OAC/BR,KAAKS,SAAS,CAACJ,KAAOE,EAAUC,MACjBF,MAAO,qCAKzB,IAAIK,EAAM,CAAC,CAAC,UAAW,eACnBD,EAAc,GACdsD,EAAU,GAGd,IAAuB,IAApBhE,KAAKI,MAAME,KACd,CAGE,IAHF,IACUD,EAASL,KAAKI,MAAdC,KAEAO,EAAI,EAAGA,EAAIP,EAAKQ,OAAQD,GAAG,EACnC,CACE,IAAME,EAAgB,IAAVT,EAAKO,GACXK,EAAM,CAACvB,EAAMkB,GAAIE,GAGvB,GAFGA,EAAM,GAAIH,EAAIO,KAAKD,GAEnBL,EAAI,IAAM,EACb,CACE,IAAIqD,EAAY9C,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAK3B,EAAMkB,IACXO,EAAAC,EAAAC,cAAA,UAAKN,KAAKC,MAAgB,IAAVX,EAAKO,IAArB,KACAO,EAAAC,EAAAC,cAAA,UAAK3B,EAAMkB,EAAE,IACbO,EAAAC,EAAAC,cAAA,UAAKN,KAAKC,MAAkB,IAAZX,EAAKO,EAAE,IAAvB,MAElBoD,EAAQ9C,KAAK+C,IAKjBvD,EAAcS,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQE,MAAO,OACPC,OAAQ,KACRF,UAAU,cACVlB,KAAMM,EACNe,QAAS,CACPwC,UAAY,CAAE1C,MAAO,QACrBI,OAAQ,CAAC,UACTuC,MAAQ,CACNC,SAAU,EACVC,UAAY,CACVC,SAAU,KAGdC,IAAM,CAAEC,WAAa,OACrB1C,OAAS,CAAE2C,SAAW,WAGhCtD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,MACjC3D,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,2BAGJF,EAAAC,EAAAC,cAAA,aACG2C,KAMvB,OACI7C,EAAAC,EAAAC,cAAA,WAAMX,UAlFcsB,aA6FbC,cANO,SAAC7B,GACtB,MAAO,CACNI,MAAQJ,EAAM8B,WAAWC,OAIZF,CAA4B8B,6BCxGrCgB,EAAQ,mBAIRC,EAAc,CACnB7C,KAAM,0BCOD8C,EAAuB,CAAC,yBAAyB,2BACjDC,EAAW,CAAC,EAAG,IACfC,EAAa,KACbC,EAAY,CAAC,EAAGD,GAEhBE,cACL,SAAAA,EAAYzF,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqF,IAClBxF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuF,GAAAlF,KAAAH,KAAMJ,KAqBP0F,SAAW,SAACC,EAAYC,GASnB,OALmBC,IAAQ,WAE9B,OAAQD,EAAOE,eAAgBH,KAGVI,YA/BJ9F,EAmCjB+F,kBAnCiB,eAAAC,EAAA/F,OAAAgG,EAAA,EAAAhG,CAAAiG,EAAA3E,EAAA4E,KAmCG,SAAAC,EAAO5F,GAAP,IAAA6F,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAX,EAAA3E,EAAAuF,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAErBjH,EAAKY,SAAS,CACbsG,UAAY,+BAA8B1G,EAAKgC,cAAgB,OAH3CuE,EAAAE,KAAA,EAOSE,MAAM,WAAY,CAAEC,OAAQ,OAChCC,KAAM,CAAC7G,EAAKgC,iBACrB8E,KAAK,SAAAC,GACD,OAAOA,EAASC,SACjBF,KAAK,SAAAG,GACJ,OAAOA,EAAO,KAZd,OA0BrB,IAnBQpB,EAPaU,EAAAW,KAerBC,QAAQC,IAAIvB,GAGRC,EAAYV,IAAYS,GAAewB,IAAK,CAAC,CAAExC,EAAS,GAAGgB,EAAcrF,OAAQ,KACjFuF,EAAaX,IAAWU,EAAWjB,GACjCmB,EAAiBxG,EAAKyF,SAASc,EAAYvG,EAAKO,MAAMuH,OAAO9H,EAAKO,MAAMwH,cAC9EJ,QAAQC,IAAIpB,GAIRC,EAAM,IAAIuB,MAAM1C,GAAY2C,KAAK,GAC7BvB,EAAO,EAAGA,EAAOL,EAAcrF,OAAQ0F,IAE9CD,EAAKJ,EAAcK,IAAU,EAE1BC,EAAYf,IAAYa,GACxBG,EAAahB,IAAWe,EAAWpB,GACjCsB,EAAkB7G,EAAKyF,SAASmB,EAAY5G,EAAKO,MAAMuH,OAAO,IACpEH,QAAQC,IAAIf,IAQJqB,EAAUlI,EAAKD,MAAfmI,OACF1B,GA1Ce,yBAAAO,EAAAoB,SAAA/B,MAnCH,gBAAAgC,GAAA,OAAApC,EAAAqC,MAAAlI,KAAAmI,YAAA,GAElBtI,EAAKO,MAAQ,CACZuH,OAAQ,GACRZ,UAAY,GACZqB,SAAU,EACVR,YAAc,GANG/H,qMAWdwI,EAAS,GACLzH,EAAI,cAAGA,EAAI,oCAEF6E,IAAoBR,EAAqBrE,WAArDK,SACJoH,EAAOnH,KAAMD,UAHQL,2BAMtBZ,KAAKS,SAAS,CAAEkH,OAAQU,EACRD,SAAS,wIA+DvB,IAAIE,EAwBF,OArBFA,GAF6B,IAAvBtI,KAAKI,MAAMgI,QAENjH,EAAAC,EAAAC,cAAA,aAAWkH,MAAM,YACxBpH,EAAAC,EAAAC,cAACmH,EAAApH,EAAD,CAAS0D,KAAM,IACY2D,aAAc,OACfC,aAAc,IAC1BvH,EAAAC,EAAAC,cAAA,2BAIPF,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAACsH,EAAA,EAAD,KACFxH,EAAAC,EAAAC,cAACuH,EAAA,EAAD,KACCzH,EAAAC,EAAAC,cAAA,oFAEDF,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAQP,QAAQ,UAAUuB,KAAK,KAAK+D,OAAK,EAACC,UAAkC,KAAvB9I,KAAKI,MAAM2G,UAAiB,SAAW,KAAM/G,KAAKI,MAAM2G,WAC7G5F,EAAAC,EAAAC,cAAC0H,EAAD,MACA5H,EAAAC,EAAAC,cAAC2H,EAAD,MACA7H,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4H,EAAD,CAAOpG,SAAU7C,KAAK4F,sBAIhBzE,EAAAC,EAAAC,cAAA,WAAMiH,UA3GHtG,aAyHHC,cAVO,SAAC7B,GACtB,MAAO,CACNI,MAAQJ,EAAM8B,WAAWC,OAIA,SAAA+G,GAAQ,MAAK,CACvCnB,MAAO,SAAAoB,GAAO,OAAID,EDrIW,CAAEvF,KAAMoB,EAAO5C,KCqIVgH,OAGpBlH,CAGboD,GCjIkB+D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,8ECdSC,cAAgB,CAC9BvH,WHGc,WACf,IADmC9B,EACnC+H,UAAAtH,OAAA,QAAA6I,IAAAvB,UAAA,GAAAA,UAAA,GAD2CnD,EAAa2E,EACxDxB,UAAAtH,OAAA,EAAAsH,UAAA,QAAAuB,EACC,OAAOC,EAAOhG,MACb,KAAKoB,EACJ,MAAO,CACN5C,KAAMwH,EAAOxH,MAEf,QACC,OAAO/B,MILJwJ,EACLP,OAAOQ,8BAAgCR,OAAOQ,+BACzCC,EAAQC,YAAYC,EAAaJ,GAEvCK,IAASC,OACR/I,EAAAC,EAAAC,cAAC8I,EAAA,EAAD,CAAUL,MAAOA,GAChB3I,EAAAC,EAAAC,cAAC+I,EAAD,OAEDC,SAASC,eAAe","file":"js/main.ae8113a2.chunk.js","sourcesContent":["import React from \"react\";\nimport Chart from \"react-google-charts\";\nimport { connect } from 'react-redux';\n\n/*\nconst REFERENCE = [ 'brazilian', 'british', 'cajun_creole', 'chinese', 'filipino', \n                    'french', 'greek',  'indian', 'irish',  'italian',  \n                    'jamaican', 'japanese', 'korean', 'mexican', 'moroccan', \n                    'russian', 'southern_us', 'spanish', 'thai', 'vietnamese']\n*/\nconst TABLE = [ \"Brazil\", \"United Kingdom\", \"United States\", \"China\", \"Philippines\", \n                \"France\", \"Greece\",  \"India\", \"Ireland\",  \"Italy\",  \n                \"Jamaica\", \"Japan\", \"South Korea\", \"Mexico\", \"Morocco\", \n                \"Russia\", \"United States\", \"Spain\", \"Thailand\", \"VietNam\"]\n\n\nclass World extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      data : null,\n      load : false \n    };\n  }\n\n  componentWillReceiveProps(nextProps) {    \n     if(nextProps.value !== this.state.value) {\n        this.setState({data : nextProps.value,\n                       load : true });\n     }\n  }\n\n  render() {\n    let arr = [[\"Country\", \"Popularity\"]];\n    let graphVisual = '';\n    \n    if(this.state.load === true)\n    {\n      const { data } = this.state;\n      \n      for(var i = 0; i < data.length; i++)\n      {\n        const val = Math.round(data[i] * 100);\n        const tmp = [TABLE[i], val];\n        if(val > 1){ arr.push(tmp); }\n      }\n    }\n\n    graphVisual = <Chart  chartType=\"GeoChart\" \n                            width=\"100%\" \n                            height=\"5%\"\n                            data={arr} \n                            options = {{  colorAxis: {colors: ['white', 'green']},\n                                          backgroundColor: '#00a0ff',\n                                          legend: \"none\" \n                            }}/>\n                  \n\n    return (\n        <div>{graphVisual}</div>\n    );\n  }\n}\n\nlet mapStateToProps = (state) => {\n\treturn {\n\t\tvalue : state.addReducer.list\n\t};\n}\n\nexport default connect( mapStateToProps )( World );\n","import React from 'react';\nimport {\n  Form,\n  Button,\n  Col,\n} from 'react-bootstrap';\n\nclass InputForm1 extends React.Component {\n   state = { inputTextData: '' }\n\n   handleChange = (e) => {\n      this.setState({\n         [e.target.name]: e.target.value\n      });\n   }\n\n   handleSubmit = (e) => {\n\t   e.preventDefault();\n\t   this.props.onCreate(this.state); // 상태 값을 부모에게 전달???\n\t   this.setState({\n\t      inputTextData: ''\n      });\n   }\n\n   handleClear = (e) => {\n      e.preventDefault();\n      this.setState({\n         inputTextData: ''\n      })\n   }\n\n   render() {\n      return (\n\t         <Form onSubmit={this.handleSubmit} onReset={this.handleClear}>\n               <Form.Row>\n                  <Form.Label>Input ingredient list</Form.Label>\n                  <Form.Control  as=\"textarea\"\n                                 required\n                                 variant=\"dark\"\n                                 placeholder=\"Tomato, Green Tea, olive oil\"\n                                 value={this.state.inputTextData}\n                                 onChange={this.handleChange}\n                                 name=\"inputTextData\"/>\n                  <Form.Control.Feedback type=\"invalid\">\n                     Please provide a valid input.\n                  </Form.Control.Feedback>\n               </Form.Row>\n               <br></br>\n               <Form.Row>\n                  <Form.Group as={Col}>\n                     <Button variant=\"dark\"  type=\"submit\"> 등 록 </Button>\n                  </Form.Group>\n                  <Form.Group as={Col}>\n                     <Button variant=\"danger\" type=\"reset\"> 취 소 </Button>\n                  </Form.Group>\n               </Form.Row>\n            </Form>\n     );\n   }\n}\n\nexport default InputForm1;\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Chart from \"react-google-charts\";\r\nimport './App.css'\r\nimport { Table } from 'react-bootstrap';\r\n\r\nconst TABLE = [ 'Brazil', 'United Kingdom', 'United States of America', 'China', 'Philippines', \r\n                'France', 'Greece',  'India', 'Ireland',  'Italy',  \r\n                'Jamaica', 'Japan', 'Korea (Republic of)', 'Mexico', 'Morocco', \r\n                'Russia', 'United States of America', 'Spain', 'Thailand', 'VietNam']\r\n\r\nclass PredictResult extends Component {\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n    this.state =  { \r\n      data : null,\r\n      load : false \r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {    \r\n    if(nextProps.value !== this.state.value) {\r\n       this.setState({data : nextProps.value,\r\n                      load : true });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let arr = [[\"Country\", \"Popularity\"]];\r\n    let graphVisual = '';\r\n    let resList = [];\r\n\r\n\r\n    if(this.state.load === true)\r\n    {\r\n      const { data } = this.state;\r\n      \r\n      for(var i = 0; i < data.length; i+=1 )  \r\n      {  \r\n        const val = data[i] * 100;\r\n        const tmp = [TABLE[i], val];\r\n        if(val > 1){ arr.push(tmp); }\r\n\r\n        if(i % 2 === 0)\r\n        {\r\n          let tmpTable =  <tr>\r\n                            <td>{TABLE[i]}</td>\r\n                            <td>{Math.round(data[i] * 100)}%</td>\r\n                            <td>{TABLE[i+1]}</td>\r\n                            <td>{Math.round(data[i+1] * 100)}%</td>\r\n                          </tr>\r\n          resList.push(tmpTable);\r\n        }\r\n      }\r\n            \r\n      \r\n      graphVisual = <div>\r\n                      <Chart  width={'100%'}\r\n                              height={'1%'}\r\n                              chartType=\"ColumnChart\"\r\n                              data={arr}\r\n                              options={{\r\n                                chartArea : { width: '100%' },\r\n                                colors: ['00a0ff'],\r\n                                hAxis : {\r\n                                  minValue: 0,\r\n                                  textStyle : {\r\n                                    fontSize: 12\r\n                                  }\r\n                                },\r\n                                bar : { groupWidth : '50%'},\r\n                                legend : { position : 'none'},\r\n                              }}\r\n                      />\r\n                      <br></br>\r\n                      <Table striped bordered hover size=\"sm\">\r\n                        <thead>\r\n                          <tr>\r\n                            <th>Country</th>\r\n                            <th>Probabilty</th>\r\n                            <th>Country</th>\r\n                            <th>Probability</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          {resList}\r\n                        </tbody>\r\n                      </Table>\r\n                    </div>\r\n    }\r\n\r\n    return (\r\n        <div>{graphVisual}</div>\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tvalue : state.addReducer.list\r\n\t};\r\n}\r\n\r\nexport default connect( mapStateToProps )( PredictResult );\r\n","const ADDER = 'addReducer/ADDER';\n\nexport const adder = list => ({ type: ADDER, list });\n\nconst intialState = {\n\tlist: []\n};\n\nexport default function addReducer(state = intialState, action)\n{\n\tswitch(action.type) {\n\t\tcase ADDER:\n\t\t\treturn {\n\t\t\t\tlist: action.list\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\n","import React, { Component } from 'react';\nimport World from './World';\nimport Form1 from './InputForm';\nimport PredictResult from './PredictResult';\nimport * as tf from '@tensorflow/tfjs';\nimport Spinner from 'react-spinner-material';\nimport { connect } from 'react-redux';\nimport { adder } from '../store/modules/addResult';\nimport { Jumbotron, Button, Container } from 'react-bootstrap';\nimport './App.css'\n\nconst MODEL_URL = 'http://54.180.91.80/model';\nconst MODEL_URL_AT_WINDOWS = ['http://127.0.0.1/model','http://127.0.0.1/model2'];\nconst INPUTDIM = [1, 30]\nconst BAGOFWORDS = 3065\nconst INPUTDIM2 = [1, BAGOFWORDS]\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tmodels: [],\n\t\t\tinputText : \"\",\n\t\t\tloading : false,\n\t\t\tchooseModel : 0\n      \t};\n  \t}\n  \n\tasync componentDidMount() {\n\t\tlet loaded = []\n\t\tfor(let i = 0; i < 2; i++)\n\t\t{\n\t\t\tlet tmp = await tf.loadLayersModel( MODEL_URL_AT_WINDOWS[i] );\n\t\t\tloaded.push( tmp );\n\t\t}\n\n\t\tthis.setState({ models: loaded,\n                \t\tloading: true});\n  \t}\n\n\tclassify = (preprcData, model) => {\n     \t\n     \t// Data Preprocessing2 Padding preprocessedSequence -> [1, 150]\n\t\t// prediction using model :: output as a softmax result that represent's probability of each 20 elements.\n     \tconst prediction = tf.tidy(() => { \n        \t//let paddedSeq = tf.tensor1d(preprcData).pad( [[ inputDim[1]-preprcData.length, 0 ]] );\n\t\t\treturn (model).predictOnBatch( preprcData );\n\t\t });\n\t\t \n     \treturn prediction.dataSync();  \n  \t}\n\n  \t// callback function InputForm component : get input value and post server \n  \tinputFormCallBack = async (data) => {\n\n\t\tthis.setState({\n\t\t\tinputText : \"\tClassification Result\t:\t\" + data.inputTextData + \"\t\"\n\t\t});\n\n     \t// Text Data -> server (POST : txt) -> text2Seq \n     \tvar processedText = await fetch(\"/getData\", {\tmethod: 'POST',\n            \t\t\t\t\t\t      \t\t\t\tbody: [data.inputTextData]\n\t\t\t\t\t\t\t    \t\t\t\t\t}).then(response => {\n           \t\t\t\t\t\t\t\t\t\t\t\treturn response.json();\n        \t\t\t\t\t\t\t\t\t\t\t}).then(result => {\n           \t\t\t\t\t\t\t\t\t\t\t\treturn result[0];\n\t\t\t\t\t\t\t\t\t\t\t\t\t });\n\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\tconsole.log(processedText);\n\t\t// MAKE DATA SELF EMBEDDING INPUTS. /////////////////////////////////////////////////////////////////////\n\n\t\tlet paddedSeq = tf.tensor1d(processedText).pad( [[ INPUTDIM[1]-processedText.length, 0 ]] );\n\t\tlet reshapeSeq = tf.reshape(paddedSeq, INPUTDIM)\n\t\tconst classification = this.classify(reshapeSeq, this.state.models[this.state.chooseModel]);\n\t\tconsole.log(classification);\n\n\t\t// MAKE DATA BAG OF 3065 WORDS /////////////////////////////////////////////////////////////////////////\n\n\t\tlet bag = new Array(BAGOFWORDS).fill(0);\n\t\tfor(let item = 0; item < processedText.length; item++)\n\t\t{\n\t\t\tbag[ processedText[item] ] = 1;\n\t\t}\n\t\tlet bagTensor = tf.tensor1d(bag);\n\t\tlet reshapeBag = tf.reshape(bagTensor, INPUTDIM2)\n\t\tconst classification2 = this.classify(reshapeBag, this.state.models[1]);\n\t\tconsole.log(classification2);\n\n\t\t///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\t\t\n\n\t\t//Redux Part!!!!!!!!!!!!!!!!!!!!!!!!!!//\n\t\tconst { adder } = this.props;\n\t\tadder(classification);\n\t\t//Redux Part!!!!!!!!!!!!!!!!!!!!!!!!!!//\n  \t}\n \n  \trender() {\n  \t\tlet pageData;\n    \t\tif( this.state.loading === false ) {\n\n\t\t\t\tpageData = <container class=\"centered\">\n\t\t\t\t\t\t\t\t<Spinner size={120} \n                           \t \t \t \t spinnerColor={\"blue\"} \n                           \t \t\t \t spinnerWidth={2} />\n                  \t\t\t\t<p>LOADING MODEL</p>\n                  \t\t   </container>\n\t\t\t} else {\n\n\t\t\t\tpageData = <div>\n\t\t\t\t\t   \t\t\t<Container>\n\t\t\t\t\t\t\t\t\t<Jumbotron>\n\t\t\t\t\t\t\t\t\t\t<h1>Hit Country Classification System Based On Ingredient-Cuisine Dataset</h1>\n\t\t\t\t\t\t\t\t\t</Jumbotron>\n\t\t\t\t\t\t\t\t\t<Button variant=\"primary\" size=\"lg\" block className={this.state.inputText===\"\" ? 'hidden' : ' '}>{this.state.inputText}</Button>\n\t\t\t\t\t\t\t\t\t<World/>\n\t\t\t\t\t\t\t\t\t<PredictResult/>\n\t\t\t\t\t\t\t\t\t<br></br>\n\t\t\t\t\t\t\t\t\t<Form1 onCreate={this.inputFormCallBack} />\n\t\t\t\t\t\t\t\t</Container>  \n\t\t\t\t\t\t   </div>\n    \t\t}\n    \t\treturn ( <div>{pageData}</div> );\n  \t}\n}\n\nlet mapStateToProps = (state) => {\n\treturn {\n\t\tvalue : state.addReducer.list\n\t};\n}\n\nconst mapDispatchToProps = dispatch => ({\n\tadder: predRes => dispatch( adder(predRes) ),\n});\n\nexport default connect(\n\tmapStateToProps,\n\tmapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport addReducer from './addResult';\r\n\r\n\r\nexport default combineReducers({\r\n\taddReducer,\r\n});\r\n\r\n\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css'\r\n\r\nimport { createStore } from 'redux';\r\nimport rootReducer from './store/modules'\r\nimport { Provider } from 'react-redux';\r\n\r\nconst devTools = \r\n\twindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\r\nconst store = createStore(rootReducer, devTools);\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App/>\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\n"],"sourceRoot":""}